/** * Enigma User Interface * * An open source application development framework for Web 2.0 or newer * * @package		Enigma User Interface *.js * @author		ExpressionEngine Dev Team * @copyright	Copyright (c) 2008 - 2017, razaki, Inc. * @license		http://razakitechnology.com/user_guide/license.html * @link		http://razakitechnology.com * @since		Version 1.3.20 * @filesource */ // prototype object "super class" function  define tradional object function E_ui(){ 	this.IsLoad = true;} //-----------------------------------------------------------------------/* * modul  		 	Uplaod Template * * @akses 			public & of run window   * @author 			uknown  */E_ui.prototype.DOM = this.self || window; //-----------------------------------------------------------------------/* * modul  		 	Uplaod Template * @akses 			public & of run window   * @author 			uknown  */   E_ui.prototype.define = {	  framewok  : 'E.U.I ( Enigma User Interface )',  namespace	: 'Ext',   version 	: '1.3.20',   revision  : '20',   author 	: 'OMENS',  email		: 'jombi_par@yahoo.com',  copyright : 'http://razakitechnology.com/siteraztech/product/web-application'}//-----------------------------------------------------------------------/* * modul  		 	"Cmp" extend superclas "object" * @akses 			public & of run window   * @author 			uknown  */ E_ui.prototype.Cmp = function(names) {	var selector = names;return({		// @object [getElementId]	// @return [getElementId]		getElementId:function(){		this.protectedID = ( typeof( names )=='object' ? selector : document.getElementById(selector) );		try{ 			return this.protectedID; 		}		// trow data jika Error terjadi 		catch(e){ Ext.Error({log : e, name : selector }); }	},		// @object [getName]	// @return [getName]			getName:function(){		try{			this.protectedName = document.getElementsByName(names);			return this.protectedName;		} 		// trow data jika Error terjadi 		catch( e ){			Ext.Error({ log: e, name : selector }); 		}	},		// @object [addClass]	// @return [addClass]			addClass : function( oclass ){				try  {			this.objID = this.getElementId(); 			if ( typeof( oclass )=='string' ) {				if( !Ext.Array( oclass ).in_array( this.objID.classList ) ){					this.objID.className = window.sprintf("%s %s",  this.objID.className , oclass);				}				}			} 		// trow data jika Error terjadi 		catch( Err ){			Ext.Error({ log: Err, name : selector}); 		}	},	// @object [addClass]	// @return [addClass]			triger : function( data ){		if( this.type() == 'select-multiple' ){			var objID = new Array(data.id, '_chosen').join('');			if( !Ext.Cmp(data.id).IsNull() ){ 				$( new Array('#',data.id,' option').join('') ).attr('selected', false).trigger('chosen:updated');			}		} else {			$(data).trigger("chosen:updated");		}	},	// @object [addClass]	// @return [addClass]			removeClass : function( other_class ){		try {			var obj = this.getElementId(); 			if ( typeof( other_class )=='string' ) {				obj.classList.remove(other_class);			}						} catch( e ){			Ext.Error({ log: e, name : selector}); 		}	},	// @object [type]	// @return [type]			type:function(){		try { 			return this.getElementId().type; 		}		// trow data jika Error terjadi 		catch(e){ 			Ext.Error({ log: e, name : selector}); 		}		},	// @object [getValue]	// @return [getValue]				getValue:function() {		this.objID = this.getElementId(), 		this.value = '';				try {						// ambil datanya jika bernilai / tidak kosong 						if( this.type()!='' )  {				if( this.type() == 'select-multiple' ) { 					this.value = this.getSelectAll(); }									if( this.type() == 'text'){ 					this.value  = this.objID.value; }									if( this.type() == 'checkbox'){ 					this.value  = this.getChecked();}									if( this.type() == 'radio'){ 					this.value  = this.getChecked();}									if( this.type() == 'select-one'){ 					this.value  = this.objID.value; }									if( this.type() == 'textarea'){ 					this.value  = this.objID.value;  }									if( this.type() == 'hidden'){ 					this.value  = this.objID.value;  }									if( this.type() == 'password'){ 					this.value  = this.objID.value; }									if( this.type() == 'file'){ 					this.value  = this.objID.value; }									return this.value;				}			}				// trow data jika Error terjadi 		catch( Err){			Ext.Error({log : Err, name : selector });		}	},		IsNull :function(){		if( typeof(document.getElementById( selector ))=='object' 			&& document.getElementById( selector ) != null ){			return false;		}		else{			return true;		}	},		getChecked:function(){		try {			var i, _elem, y=0, _check_list = [];			_elem = this.getName();			for( i=0; i< _elem.length; i++){				if( _elem[i].checked ) {					_check_list[y] = _elem[i].value;					y++;				}			}				return _check_list;		 		}		catch(e){			Ext.Error({log : e, name : names });		}	},			Checked:function(){		var _e = this.getElementId();		try{			if( _e.checked ) return 1			else				return 0;		}		catch(e){			Ext.Error({log : e, name : names });		}	},		getSelect:function(){		var i, option, _list_text = [];		try 		{			option = this.getElementId();			for ( i=0; i< option.length; i++ )			{				 				if( option.options[i].selected){					_list_text[i] = option.options[i].value;				}			}							return _list_text;		}		catch(e){			Ext.Error({log : e, name : names });		}	},		getSelectAll:function(){		var i, option, select = {};		try 		{			option = this.getElementId();			for ( i=0; i< option.length; i++ ) 			{				if( option.options[i].value !=='undefined') {										if( option.options[i].selected )					{						var arr_select = option.options[i].value;						if( arr_select!=='' )						{							select[arr_select] = arr_select;						}					}				}			}				return ( typeof( Object.keys(select) ) =='object' ? Object.keys(select).join(',') : '' );		}		catch(e){			Ext.Error({log : e, name : names });		}	},			setFocus:function(){		var _e = this.getElementId();		try{ return _e.focus(); }		catch(e){			Ext.Error({log : e, name : names });		}		},		focus : function(){		this.setFocus();		},		disabled:function( cond ){				// cek jika tidak ada maka tidak usah di process 		if( this.IsNull()  ){			console.log( window.sprintf("%s : undefined / null ", names) );			return false;		}				// set default on here .		this.objID 	 = this.getElementId();		this.objType = this.type();		this.objName = this.getName();		this.objNum  = 0;				try {			if ( this.objType =='checkbox' || this.objType =='radio'){				for( this.objNum =0; this.objNum < this.objName.length; this.objNum++){					 this.objName[this.objNum].disabled = cond; 				}				}			else{				this.objID.disabled = cond;				this.triger( this.objID );			}					} catch( error ){			Ext.Error({ log : error, name : names });		}				return;	},			empty:function(){		var _e = this.getValue();			try {				if( _e==''){ return true; }				else{ return false; }			}			catch(e){				Ext.Error({log : e, name : selector });			}		},		setValue:function( s ){		var _e = this.getElementId();		try		{ 			if( this.type()=='select-one') {				var options = _e.options;				for (var i= 0; i < options.length; i++)  {					if (options[i].value==s ){						_e.options.selectedIndex = i;							break;				    }				}			}			else {				_e.value = s; 			}						if( this.type()=='select-one' ) { this.triger(_e); }			if( this.type()=='select-multiple' ){ this.triger(_e); }				if( this.type()=='text' ) { this.triger(_e); }					}		catch(e){ Ext.Error({log : e, name : names }); }		return;		},			setText:function( s ){		var _e = this.getElementId();		try { _e.innerHTML = s; }		catch(e){			Ext.Error({log : e, name : names });		}	},			getText:function(){		var _e = this.getElementId();		try{ return _e.options[_e.options.selectedIndex].text; }		catch(e){			Ext.Error({log : e, name : names });		}	},		oneChecked : function(obj_handle){		if( obj_handle.checked){			this.setUnchecked();			obj_handle.checked = true;		}		else{			obj_handle.checked = false;		}	},		getCheckBox  : function(){ return this.onSelectCheck()},	Checkedln : function(){  return this.onSelectCheck()},	onSelectCheck : function()	{		var lns = this.getName(), 			obj = { tchecked: 0,  tunchecked : 0, 					IsCheked:{}, IsUnchecked:{}  }, 			call_user_func = {};				for( var i = 0; i < lns.length; i++ ) {			if( lns[i].checked ){				obj.IsCheked[lns[i].value] = lns[i].value; 				obj.tchecked+=1;			}			else {				obj.IsUnchecked[lns[i].value] = lns[i].value;				obj.tunchecked+=1;			}			}			    call_user_func.IsChecked  = function(){			return ( obj.IsCheked ? Object.keys(obj.IsCheked): null );		};				call_user_func.Selector = function(){			return ( obj ? obj : null );		};		  		  		call_user_func.IsUnchecked = function(){			return ( obj.IsUnchecked ? Object.keys(obj.IsUnchecked): null );		};					call_user_func.Slice = function(fn){			fn(this);		}				return ( call_user_func ? call_user_func : obj );	},		setChecked:function(){		try 		{			var i, _elem = this.getName(); 			if( this.Checkedln().Selector().tchecked < _elem.length ){				for( i=0; i < _elem.length; i++ ){					_elem[i].checked = true;				}			}			else if( this.Checkedln().Selector().tchecked == _elem.length ) {				for( i=0; i < _elem.length; i++ )  					_elem[i].checked = false;			}			}		catch(e){			Ext.Error({log : e, name : names });		}	},		setUnchecked:function(){		var i, e = this.getName();		for( i=0; i < e.length; i++ ) {			if( e[i].checked==true ){				e[i].checked = false;			}		}	},		setMaxlength:function( n ){		var _e = this.getElementId();		try { _e.maxLength = n; }		catch(e){			Ext.Error({log : e, name : names });		}	},			setIndex:function( n ){		var _e = this.getElementId();		try{ _e.options.selectedIndex = n;  }		catch(e){			Ext.Error({log : e, name : names });		}	},				listener:function( fn ){		var evt = ( this.getElementId()!=null ? this.getElementId() : false );		try 		{			if( evt!=false )			{				if((typeof(fn)=='string')||				   (typeof(fn)=='object'))				{					for(var _e in fn )					{						if((_e.toLowerCase()=='onclick')||(_e.toLowerCase()==onclick))  							evt.addEventListener("click", fn[_e],false);													if((_e.toLowerCase()=='onkeyup')||(_e.toLowerCase()==onkeyup))							evt.addEventListener("keyup", fn[_e],false);												if((_e.toLowerCase()=='onchange')||(_e.toLowerCase()==onchange)) 							evt.addEventListener("change",fn[_e],false);													if((_e.toLowerCase()=='onkeydown')||(_e.toLowerCase()==onkeydown)) 							evt.addEventListener("keydown",fn[_e],false);													if((_e.toLowerCase()=='onscroll')||(_e.toLowerCase()==onscroll)) 							evt.addEventListener("onscroll",fn[_e],false);														if((_e.toLowerCase()=='onresize')||(_e.toLowerCase()==onresize)) 							evt.addEventListener("resize",fn[_e],false);							}				}			}			}		catch(e){			Ext.Error({log : e, name : names });		}	},		addEventListener : function(event, fn){		if( typeof(event)=='string' && typeof(fn)=='function')		{			var b = this.getElementId();			if( typeof(b)=='object'){				b.addEventListener(event,fn,false);			}		}		},	each : function( properties ){		if( typeof(properties)=='function'){			var list_array = [];			Array.prototype.slice.call( this.getName() ).forEach(function(item){				list_array.push(item);			});						properties(list_array);		}	},		removeEventListener : function(event, fn){		if( typeof(event)=='string')		{			var b = this.getElementId();			if( typeof(b)=='object'){				b.removeEventListener(event,fn,false);			}		}		},			Encrypt:function(){		if( this.type() =='checkbox' ){			var check=[], _object = this.getChecked();			for( var i in _object ){				check[i] = Ext.BASE64.encode(_object[i]);			}			}			else{			var _object =  ( this.empty()!=true ? Ext.BASE64.encode(this.getValue()) : null);						}					if( _object ) {			try { 				return ( this.type() =='checkbox' ? check : _object );			}			catch(e){ Ext.Error({log : e, name : names }); }		}	},		Decrypt:function(){		_encript = this.Encrypt();		if( _encript )		{			try{ return Ext.BASE64.decode(_encript); }			catch(e){ Ext.Error({log : e, name : names }); }		}	},		getAttribute: function(){		var b = this.getElementId(), a = {			Array : function()			{				var attr = [];				Array.prototype.slice.call( b.attributes ).forEach(function(item) {					attr[item.name] = item.value;				});								return ( attr.length > 0 ? attr : null );			},						Object : function(){				var attr = {};				Array.prototype.slice.call( b.attributes ).forEach(function(item) {					attr[item.name] = item.value;				});								return ( attr ? attr : null );			},						NodeName : function(){				var attr = [], i = 0;				Array.prototype.slice.call( b.attributes ).forEach(function(item) {					attr[i] = item.name;					i++;				});								return ( attr ? attr : null );			},						NodeValue : function( p ){				var attr = [], i = 0;				Array.prototype.slice.call( b.attributes ).forEach(function(item) {					if( item.name=='value') 						attr[item.name] = item.ownerElement.value;					else						attr[item.name] = item.value;											i++;				});				return ( p ? attr[p] : null );			}		}				return ( a ? a : null );	},		setAttribute: function( name, value ){		var b = this.getElementId();		try		{			if( (name!='') ) {				return ( b ? b.setAttribute(name,value) : null ); 			}		}		catch( e ){			Ext.Error({ log : e, name : this.NodeValue('name') });		}		},		removeAttribute:function(el){		if( typeof(el)=='string') {			var e = this.getElementId();			if( typeof(e)=='object'){				e.removeAttribute(el);			}			}	},		render:function( render ){		if( typeof(render)=='string' ){			return ({				Attr : function(a){					if(a!='') {						Ext.Cmp(render).setAttribute(a,							Ext.Cmp(names).getAttribute().NodeValue(a)						);					}				} 			});		}		} });};// cek ready document object (function(UI){	UI.prototype.IsNull = function(ID){		if( typeof(document.getElementById(ID))=='object' 			&& document.getElementById(ID) != null ){			return false;		}		else{			return true;		}	}})(E_ui); /* @ def 	:  Css #revision methode style--> * * @ triger : Pecah Policy * @ params : jika terjadi pecah polis */ (function(Cores){ Cores.prototype.Css = function(elem) {	return ({		options :(function(){			return Ext.Cmp(elem).getElementId();			})(),				style:function( attr ){			var styles = this.curCSS( attr ); 			if( styles ){				this.options.setAttribute("style",styles);			}			},				addClass : function( other_class ){			if( typeof(this.options)=='object' || typeof(this.options)=='string' ) {				var obj = this.options;									obj.className = obj.className +" "+ other_class;  			}			},				removeClass : function( className ){			if( typeof(this.options)=='object' || typeof(this.options)=='string' ){				this.options.classList.remove(className);			}		},				curCSS : function( CSS ){			var currCSS = '';				if(typeof(CSS)=='object' ) {				for( iCSS in CSS ) {					if(typeof(CSS[iCSS])=='number' )						currCSS += iCSS +':'+ CSS[iCSS] +'px;';												if(typeof(CSS[iCSS])=='string' )						currCSS += iCSS +':'+ CSS[iCSS] +';';					}				} 			return currCSS;		},				setup:function( each , set ){			elem = this.options.style;			for( i in elem ){				if( each ===i ) 					elem[i] = set; 			}			}	}); }})(E_ui);/* @ def 	:  Css  * * @ triger : Pecah Policy * @ params : jika terjadi pecah polis   Ext.Format('10000').Curr(); */ (function(Cores){  Cores.prototype.Format = function(n){   var NUMBER = n, format = {		CURRENCY : function() {			if( typeof(NUMBER)=='number' || 				typeof(NUMBER)=='string')			{				return ( NUMBER.toFixed(2).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") ? 						 NUMBER.toFixed(2).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") : false );			}		},		INT :function(){			if( typeof(NUMBER)=='number' || 				typeof(NUMBER)=='string')			{				return parseInt(NUMBER);			}			}, 				IDR :function(){			if( typeof(NUMBER)=='number' || 				typeof(NUMBER)=='string')			{				return ( NUMBER.toFixed(0).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1.") ? 						 NUMBER.toFixed(0).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1.") : false );			}			} 	}		return ( typeof(format)=='object' ? 			 format : false ); }})(E_ui);/* @ def 	:  Css  * * @ triger : Pecah Policy * @ params : jika terjadi pecah polis */ E_ui.prototype.Set = function( opts ){	var _ui = opts;	var _Ext = new E_ui();	return({		IsNumber:function(){			var Lstring, Lconstant, Rstring;				Lstring = _Ext.Cmp(opts).getValue().length;				Lconstant = ( (_Ext.Cmp(opts).getValue().length)-1 );				Rstring = _Ext.Cmp(opts).getValue().substring(Lconstant,Lstring)						if(isNaN(Rstring))			{				var _s = _Ext.Cmp(opts).getValue().substring(0,_Ext.Cmp(opts).getValue().length-1);				try{					_Ext.Cmp(opts).setValue(_s);					}				catch(e){					Ext.Error({log : e, name : opts });				}			}		},				IsString:function(){			var Lstring, Lconstant, Rstring;				Lstring = _Ext.Cmp(opts).getValue().length;				Lconstant = ( (_Ext.Cmp(opts).getValue().length)-1 );				Rstring = _Ext.Cmp(opts).getValue().substring(Lconstant,Lstring)						if(!isNaN(Rstring))			{				var _s = _Ext.Cmp(opts).getValue().substring(0,_Ext.Cmp(opts).getValue().length-1);				try{					_Ext.Cmp(opts).setValue(_s);					}				catch(e){					Ext.Error({log : e, name : opts });				}			}		}	});};/* @ def 	:  Join  * * @ triger : Pecah Policy * @ params : jika terjadi pecah polis */ E_ui.prototype.Join = function( params ){ var _a =  { 	http : function(){	 var _p = ''		for(var eval in params )		{			for( var _eval in params[eval]) {				_p = _p +'&' + _eval + '=' + params[eval][_eval];			}		}		return ( _p ? _p : '' );    },		object : function(){	 var object = {};		for(var eval in params )		{			for( var _eval in params[eval]){				object[_eval] = params[eval][_eval];			}			}				return ( object ? object : '' );	},		base64 : function(){	 var object = {};		for(var eval in params )		{			for( var _eval in params[eval]){				object[_eval] = Ext.BASE64.encode(params[eval][_eval]);			}			}				return ( object ? object : '' );	},		array :function() {	 var _array = []; 		for(var eval in params )		{			for( var _eval in params[eval]){				_array[_eval] = params[eval][_eval];			}			}				return ( _array ? _array : false );	} }  return _a; }; E_ui.prototype.Date = function( opts ){ var _ui = ( opts ? opts : '' ); var _Ext = new E_ui(); return({		Sort : function( f ){			_Ext.Cmp(opts).setMaxlength(5);			var _find = _Ext.Cmp(opts).getValue();			try {				if ( _find.match(/^\d{2}$/) !== null) { 					_Ext.Cmp(opts).setValue( _find + ( f?f:'/' ) );				}			}			catch(e){				console.log(e)			}			},				Long : function( f ){			_Ext.Cmp(opts).setMaxlength(10);			var _find = _Ext.Cmp(opts).getValue();			try			{				if ( _find.match(/^\d{2}$/) !== null) {_Ext.Cmp(opts).setValue(_find + f ); }				else if ( _find.match(/^\d{2}\-\d{2}$/)!== null) {_Ext.Cmp(opts).setValue(_find + f );  }			}			catch(e){				console.log(e)			}		},				getNow : function() {			 var time = new Date(); 			 return ( time ?  time : 0 );		},				getTimeStamp : function (){			var stamp = (this.setDigital(this.getNow().getFullYear())+'-' 						+this.setDigital((this.getNow().getMonth()+1))+'-'						+this.setDigital(this.getNow().getDate())+ ' '						+this.setDigital(this.getNow().getHours())+':' 						+this.setDigital(this.getNow().getMinutes())+':' 						+this.setDigital(this.getNow().getSeconds()));			return stamp;		},				getDate : function(){			var stamp = (this.setDigital(this.getNow().getFullYear())+'-' 						+this.setDigital((this.getNow().getMonth()+1))+'-'						+this.setDigital( this.getNow().getDate()));				return stamp;				},				getTime : function(){			var stamp = (this.setDigital(this.getNow().getHours())+':' 						+this.setDigital(this.getNow().getMinutes())+':' 						+this.setDigital(this.getNow().getSeconds()));			return stamp;		},				getDuration : function(){			var _time =( this.getNow()/ 1000 );			return ( _time ? _time : 0 );		},				leftPad: function(number, targetLength) {			var output = number + '';			while (output.length < targetLength) {				output = '0' + output;			}			return output;		},				setDigital: function(n){			return n > 9 ? "" + n: "0" + n;		}   });};//---------------------------------------------------------------------------------------//---------------------------------------------------------------------------------------/* @pack ...................... : Serialize object properties   * @param ..................... : uknown  * @author .................... : uknown  *  */ E_ui.prototype.Serialize = function( serialize ) {		 var _Ext = new E_ui(), 		protectedFields = {}, frm = serialize; 				 return ({				add : function( field, value ){			if( typeof( field ) == 'object' ){				protectedFields = field;			} else { 				protectedFields[field] = value;			}		},		getForm : function(){			var elementsform = document.forms;			var formIndex = null; 			for( var element in elementsform ){				if( elementsform[element].name == frm ){					formIndex = element;				}			}			return ( formIndex == null ? false : formIndex );		},		getArrayJoin : function(){			var arrayJoin = new Array();			var allElements = new Array(this.getInput(),this.getSelect(),this.getChecked(), this.getTextarea());			for(var i in allElements ){				for(var x in allElements[i]){					arrayJoin[x] = allElements[i][x];				}			}			return arrayJoin;		},				getFormJoin:function(){			var arrayJoin = new Array();			var allElements = new Array(				this.getInput(),				this.getSelect(),				(function(e){					try					{						var _aInput = []						if( e.getForm()!='' )						{							var elements = document.forms[e.getForm()].getElementsByTagName('input');							for( var i= 0; i<elements.length; i++)							{								if( elements[i].type=='radio'||elements[i].type=='checkbox')								{									var y = 0, ByName, _check_list = [];																ByName = _Ext.Cmp(elements[i].name).getName();									for( var z=0; z< ByName.length; z++){										if( ByName[z].checked )										{												_check_list[y] = ByName[z].value;											y++;										}									}																		_aInput[elements[i].name]= _check_list; 								}								}							return _aInput;						}						else							console.log(Ext.Sprintf("No [%s] Form identification..", frm));					}					catch(e)					{						Ext.Error({							log  : e,							name : "Ext.Serialize(objhandle).getChecked()"						});					}				})(this), 				this.getTextarea()			);			for(var i in allElements ){				for(var x in allElements[i]){					arrayJoin[x] = allElements[i][x];				}			}			return arrayJoin;		},				getInput:function(){			var _aInput = [];			if( typeof(this.getForm())=='string' && this.getForm() !=='' ){				var elements = document.forms[this.getForm()].getElementsByTagName('input');				for( var i= 0; i<elements.length; i++){					if( (elements[i].type!='checkbox') 						&& (elements[i].type!='button') 						&& (elements[i].type!='file') )					{						if( elements[i].name!='') {							_aInput[elements[i].name] = elements[i].value; 						}					}				}				return _aInput;			}			else{				Ext.Error({					log  : "No Form identification..",					name : "Ext.Serialize(objhandle).getInput()"				});			}		},				getChecked:function(){			try {				var checkbox = new Array(), arr_item = {};				if( typeof(this.getForm())=='string' && this.getForm() !=='') {					var elm = document.forms[this.getForm()].getElementsByTagName('input');					for( var i = 0; i<elm.length; i++) {						if( (elm[i].type=='radio') || (elm[i].type=='checkbox') ) {							checkbox[elm[i].name] = Ext.Cmp(elm[i].name).getValue();						}					}										for( var n in checkbox ){						arr_item[n] = checkbox[n].join(',');					}											return ( typeof(arr_item) == 'object' ? arr_item  : '');				}				else{					console.log(Ext.Sprintf("No [%s] Form identification..", frm));				}							} catch(e) {				Ext.Error({ log  : e, name : "Ext.Serialize(object).getChecked()" });			}			},		getTextarea:function(){			try{				var _aInput = []				if( this.getForm()!='' )				{					var elements = document.forms[this.getForm()].getElementsByTagName('textarea');					for( var i= 0; i<elements.length; i++)					{						_aInput[elements[i].id] = elements[i].value; 					}					return _aInput;				}				else					console.log(Ext.Sprintf("No [%s] Form identification..", frm));				}			catch(e)			{				Ext.Error({					log  : e,					name : "Ext.Serialize(objhandle).getTextarea()"				});			}			},		getSelect:function(){			var ArraySelect = {};			if( this.getForm()!='' ){				var elements = document.forms[this.getForm()].getElementsByTagName('select');				for( var i= 0; i<elements.length; i++){										var conds = Ext.Array(new Array('select-multiple','select-one')).in_array(elements[i].type);					if( conds ){						ArraySelect[elements[i].name] = Ext.Cmp(elements[i].id).getValue();					}					}				return ArraySelect;			}			else				console.log("No Form identification..");		},				getElement:function(){			this.protectedElement = this.getArrayJoin();			if( this.protectedElement ) {				return this.protectedElement;			}			return false;		},			// hindari data ganda / function yang terduplicate 		  Data : function(){		  this.protectedElements = this.getArrayJoin(), 			this.protectedFields = protectedFields,			this.protectedData = {};						// ambil object data satu default dari form 						if( typeof(this.protectedElements) == 'object') {				for( var y in this.protectedElements ){					this.protectedData[y] = this.protectedElements[y];						}			}						// ambil object additional 						if( typeof( this.protectedFields ) =='object' ) {				for( var i in this.protectedFields ){					this.protectedData[i] = this.protectedFields[i]; 				}			}						protectedFields = {}; // empty data object gak cache 			return this.protectedData;			//return this.getArrayJoin();	  },	  	// get all inialize data all parameter on oke 	// the best param data "POST"			Initialize :function(){			this.protectedElements = this.getArrayJoin();			if( typeof( this.protectedElements ) == 'object' ){				return this.protectedElements;			}			return new Array();		},				getReportElement:function(){		   this.protectedElements = this.getFormJoin();			if( this.protectedElements ) {				return this.protectedElements;			}		},				Required : function( vs ) {		 var is = 0, vs = ( typeof( vs )=='object' ? vs : [] );		 			for( var i in vs ) {				if( Ext.Cmp(vs[i]).empty() ) 				{					Ext.Cmp(vs[i]).addClass("form-required");					if( (Ext.Cmp( vs[i] ).type() == 'select-one') && (typeof( $ ) == 'function')) {						$('#'+vs[i]+'_chosen').find("a.chosen-single").css("border-color","red");					}					is += 1; 				} else {					Ext.Cmp(vs[i]).removeClass("form-required");					if( (Ext.Cmp( vs[i] ).type() == 'select-one') && ( typeof( $ ) == 'function' )){						$('#'+vs[i]+'_chosen').find("a.chosen-single").css("border-color","silver");					}				}			}						return ( (is > 0) ? false : true ); // ok					},				Complete : function( exactly ) {			var param = this.getElement(), _ic = 0, NotIn = ( (exactly!='')? exactly : []); 						for( var component in param ) 			{				if( !Ext.Array(NotIn).in_array(component) )				{															if( Ext.Cmp(component).empty() ) {						Ext.Cmp(component).addClass("form-required");						if( (Ext.Cmp( component ).type() == 'select-one') && ( typeof( $ ) == 'function' )){							$('#'+component+'_chosen').find("a.chosen-single").css("border-color","red");						}						_ic +=1;					}						else{						Ext.Cmp(component).removeClass("form-required");						if( (Ext.Cmp( component ).type() == 'select-one') && ( typeof( $ ) == 'function' )){							$('#'+component+'_chosen').find("a.chosen-single").css("border-color","silver");						}					}				}				}			if( (_ic > 0) )				return false;			else					return true;		},				// -- data must be objet like "field : value " ---				setValue : function( data ) {				// ---- called super class methode data ------ 				var o = Ext.self();			if( typeof( o ) ) for( var i in o ){				this[i] = o[i];			}						this.data = data;				this.key = Object.keys( this.data ),			this.val = Object.keys( this.getElement() );						if( this.IsObject( this.data )) {				for( var key in this.data ){					if( this.Array( this.val ).in_array( key ) ){						this.Cmp( key ).setValue( this.data[key] );						this.Cmp( key ).triger( key );					}									}			}			return this;		},				Clear : function(exactly){			var param = this.getElement();			var NotIn = ( (exactly!='')? exactly : []); 			for( var component in param ){				if( !Ext.Array(NotIn).in_array(component) ) {										if( Ext.Cmp(component).type() == 'checkbox' ){						Ext.Cmp(component).setUnchecked();					} 					else {						Ext.Cmp(component).setValue('');						Ext.Cmp(component).triger(component);					}				}			} 		},		Debuger:function(){			var loger = this.getElement();				console.log( Object.keys(loger).join(':"",\n'));		},		Cmp : function( val ){			var element = this.getArrayJoin();			var arr_object = {				getValue  : function(){					return ( element[val] ? element[val] : null );				}			}			return ( typeof ( arr_object)  == 'object' ? arr_object : null );		},				Each : function( fn ) {			if( typeof fn == 'function' ){				var arr_object = Object.keys(this.getElement())				return fn(arr_object);			}		},		prop : function( fn ) {			if( typeof fn == 'function' ){				return fn(this.getElement())			}		},						Submit : function( options ) {					// --- call parent class active  -------------------------------------					var options = options, parents = new E_ui();			if( typeof( parents ) == 'object' ) for( var i in parents ){				this[i] = parents[i]; // --- push method this context ---			}					// --- then will proces methode  -----------					if( typeof( options ) == 'object' ){				var procedure = {};				if( typeof( options.procedure ) == 'object') {					procedure = options.procedure;				}								// -- this callback  ----------------------------------								if( typeof( options.callback ) == 'object' )				{					var form = this.Serialize( frm ), $continue = true;					if( typeof( procedure.arg ) == 'string' ){												$continue = form[procedure.arg].apply( this, new Array( procedure.val ) );						//console.log( $continue );											}									if( !$continue ){						this.Msg( "form not complete" ).Info();						return false;					}										var param = this.Join( new Array( options.callback.param, form.Initialize() ) );					if ( typeof( param )  == 'object'){						options.callback.param = param.object();					}					// unitTest : console.log( options.callback.param );					// --- then will translate to ajax process  keep its clean   					this.Ajax({						url     : options.callback.url, 						method  : options.callback.method,						param   : options.callback.param,						success : options.callback.success					}).post();										options.callback.param = {}; 				}			}		}		});};//--------------------------------------------------------------------------------------------------/** * prototype.Json  == class attr json data   * * Returns the "index_page" from your config file * * @access	public * @return	string */ ( function( Super ) { Super.prototype.Json = function( xhrUrl, param ) {	 	var self = Ext.self();	for( var i in self ){  this[i] = self[i];  }		this.param = {};	this.index = this.System.view_page_index();	// then set object data parameter  --- 	if( this.IsObject( param ) ) for( var i in param ){		this.param[i] = param[i];	}	// if isArray then will set to apply --  		if( this.IsObject( xhrUrl ) ) {		this.xhrUrl = this.EventUrl( xhrUrl ).Apply();		} 	// if is IsString then will get data xhrUrl  then wil set data ajax --	if( this.IsString( xhrUrl ) ) {		// console.log( xhrUrl.indexOf('.php') );		if( xhrUrl.indexOf('.php') == -1 ){			xhrUrl = this.EventUrl(new Array(xhrUrl) ).Apply();		} 		this.xhrUrl = xhrUrl;	} // this get by ajax proces handle err 	var rowset = this.Ajax({ url : this.xhrUrl, param : this.param }).json(),		supper = this;//  --- return of key data "rowset" @object data array	this.dataRow = function(){		if( supper.IsObject( rowset.data ) ){			return rowset.data;		}		return {};	}; // --- return of key data "rowset" 	@object data array 	this.dataKey = function(){		if( supper.IsObject( rowset) ){			return Object.keys( rowset );		}		return [];	};// --- return of key data "rowset" 	@object data array 	this.dataSuccess = function(){		if( supper.IsObject( rowset ) && rowset.success == 1 ){			return true;		}		return false;	};// --- return of key data "rowset" 	@object data array 		this.dataKeyStr = function(){		if( supper.IsObject( rowset.data ) ){			return Object.keys( rowset.data ).join(",");		}		return "";	};// --- return of key data "rowset" 	@object data array 			this.dataValStr = function(){		var valObjKey = {};		if( supper.IsObject( rowset.data ) ){			for( var i in rowset.data ){				valObjKey[rowset.data[i]] = rowset.data[i];				}			return Object.keys(valObjKey).join(",");		}		return "";	};	// --- return of key data "rowset" 	@object data array 		this.dataItem = function(){		if( supper.IsObject( rowset ) ){			return rowset;		}		return {};	};// --- return of key data "rowset" 	@object data array 		this.dataItemEach = function( callback ){		if( supper.IsFunction( callback ) && supper.IsObject( rowset ) ){			callback.apply(this, new Array( rowset, supper.clientResJson, supper ));		}		return false;	};// return "this" object row ==================>		return this;  }	})( E_ui ); //--------------------------------------------------------------------------------------------------/** * prototype.Ajax  == class object function  * * Returns the "index_page" from your config file * * @access	public * @return	string */  E_ui.prototype.Ajax = function( fn ) {	  var ajaxDefaults =  {	// this constructor default next again this not useed . expired code  // will be customize ajax process eficient		_ajaxSetup : ( function( fn ) {				var _uri_win = '';				for( var _p in fn.param ) {		   if( _uri_win != null ) {			 _uri_win = _uri_win +''+ _p +'='+ fn.param[ _p ] +'&'; 		   }			}				_uri_win  = _uri_win.substring( 0, ( _uri_win.length-1) ).replace(/\s+/g, '%20');				return fn.url +'?'+ _uri_win;	})( fn ),	// function "load" ajaxListener object  this will converet data 		ajaxReqInner : '',	// new default ajax settings  for attribute class object "Ajax" will setup // compatible with IE | FF new version object // this not compatible with IE < 10 .		ajaxSettings  : {		ajaxUrl   	: (typeof( fn.url ) == 'undefined' ? '' : fn.url ), // set url defaul 		ajaxParam 	: (typeof( fn.param ) == 'undefined' ? {} : fn.param ), // set paramete data 		ajaxType  	: (typeof( fn.method ) == 'undefined' ? 'GET' : fn.method.toUpperCase()), // set parameter setup 		ajaxSync  	: false,		ajaxMime    : "*",			ajaxFunc  : {			complete : (typeof( fn.complete ) == 'function' ?  fn.complete : false ),  // interface function 			success  : (typeof( fn.success ) == 'function' ? fn.success : false ), // interface function			message  : (typeof( fn.message ) == 'function' ? fn.message : false ), // interface function			abort 	 : (typeof( fn.abort ) == 'function' ? fn.abort : false ), // interface function			error    : (typeof( fn.error ) == 'function' ? fn.error : false ), // interface function			timeout  : (typeof( fn.timeout ) == 'function' ? fn.timeout : false ), // interface function			ERROR    : (typeof( fn.ERROR ) == 'function' ? fn.ERROR : false ) // interface function		},		ajaxFiles 	 : ( typeof( fn.file ) == 'undefined' ? false : fn.file ) // get "file" object sent data .,	},	// function "ajaxListener" well clarification this methode exist or not // to setup ajax "callback function" 	ajaxListener : {		"timeout"	: "timeout",		"complete" 	: "load",		"success" 	: "load",		"message" 	: "load",		"abort" 	: "abort",		"error"		: "error",			"ERROR"  	: "load"	},		// function "ajaxFuction" well clarification this methode exist or not // to setup ajax "callback function" 		ajaxMimeType : {		"json"		: { type : "Content-Type", content : "application/json, text/javascript"},		"html" 		: { type : "Content-Type", content : "text/html"},		"text" 		: { type : "Content-Type", content : "text/plain"},		"xml" 		: { type : "Content-Type", content : "application/xml, text/xml"},		"*"			: { type : "Content-Type", content : "application/json, text/javascript, text/html, text/plain, application/xml, text/xml"}	},	// function "ajaxFuction" well clarification this methode exist or not // to setup ajax "callback function" 	ajaxFuction : function( functions ) {		if( typeof( functions ) == 'function' ){			return true;		}					return false;	},	// -- function "ajaxObject" well clarification this methode exist or not  // to setup ajax "callback function" 		ajaxObject : function( value ) {		if( typeof( value ) == 'object' ){			return true;		}					return false;	},	// function well clarification this methode exist or not // to "ajaxSettup" ajax "callback function"		ajaxSettup : function( settings, options ) {		var objSettup = {}; 		if( typeof( options ) ) for( var i in options ) {			this[i] = options[i]; 		}		return this;		}, // function well clarification this methode exist or not  // to ajaxSettup 	ajax "ajaxToString"		ajaxToString : function( options ){		if( typeof( options )  == 'object' ){			return options.join(',').toString();		}		return options.toString();	},	// this parent of class object xml,		ajaxClientReq : {}, 	 // function "ajaxRtrim" properties method 	ajaxRtrim : function( str, chr, len ){		var chrAt = str.substring((str.length-len), str.length );		if( chrAt.indexOf(chr) == (len-1) ){			return str.substring(0, (str.length-len));		}		return str;	},	 // function "ajaxToUrl" properties method 	ajaxToUrl : function( options ) {		var ajaxReqts = "", ajaxReqUrl = new Array(), i= 0;		if( typeof(options.ajaxParam == 'object') ) for( var s in options.ajaxParam ) {		  ajaxReqUrl[i] = window.sprintf('%s=%s', s, this.ajaxToString(options.ajaxParam[s]) );		  i++;		}		 // if length of Object is null === 0 then exit script ---- 			if( !ajaxReqUrl.length ){			ajaxReqts = window.sprintf("%s/?", this.ajaxRtrim(options.ajaxUrl, "/", 1)); 		} else {			ajaxReqts = window.sprintf("%s/?%s", this.ajaxRtrim(options.ajaxUrl, "/", 1), ajaxReqUrl.join("&"));		}		return ( ajaxReqts == 'undefined' ? "" : ajaxReqts );	},		// ------------------------------------------------------------------------------------------------------------------	 /*   @Ext	: this prototype.Ajax == object with metjode post data from client sesison 		  by handle function "responseText" methode , for easy use look at . 		   update optimize of script object handler with new revision .	 */		 	responseText : function(){		// define parameter dat proces 		var clientResponseText = null, clientSelf = this.post(), self = new Ext.Util({ });				// define object akses data to sent method 				if( self.IsObject( clientSelf ) ){			if( clientSelf.readyState == 4 ){				clientResponseText = clientSelf.ajaxClientReq;			}		}		// retrun callback to client session 		return clientResponseText;	}, // ------------------------------------------------------------------------------------------------------------------	 /*   @Ext	: 	this prototype.Ajax == object with metjode post data from client sesison 			by handle function "JSON" methode , for easy use look at . 			update optimize of script object handler with new revision .	 */				json : function() { try {				var ajaxSettings = this.ajaxSettup({}, this.ajaxSettings);					  // -- XML object active on browser "XMLHttpRequest"		  			this.ajaxClientReq = ( typeof( XMLHttpRequest ) == 'function' ? new XMLHttpRequest() : 								new ActiveXObject("Microsoft.XMLHTTP")  );										  // object active on ajaxsettup 		  		    if( typeof( ajaxSettings ) == 'object') {							// -- tradional metjode type "GET"  			// -- will send of object attribute				var ajaxMime  = this.ajaxMimeType["json"];			    if( ajaxSettings.ajaxType == 'GET' ) {										// -- this will get arguments callback  -----------											var callbacks = ajaxSettings.ajaxFunc;					if( this.ajaxObject(callbacks)) for( var i in callbacks ){						if( this.ajaxFuction( callbacks[i] ) ){							this.ajaxClientReq.addEventListener(this.ajaxListener[i], callbacks[i], ajaxSettings.ajaxSync );							}						}															var ajaxToUrl = this.ajaxToUrl( ajaxSettings );											this.ajaxClientReq.open(ajaxSettings.ajaxType, ajaxToUrl, ajaxSettings.ajaxSync );						this.ajaxClientReq.setRequestHeader(ajaxMime.type, ajaxMime.content);						this.ajaxClientReq.send(null);											var ajaxResponseText = JSON.parse( this.ajaxClientReq.responseText.trim() );					if( ajaxResponseText ) {						return ajaxResponseText;					}					} 								// -- tradional metjode type "POST" ----------------------- 			// -- will send of object attribute  ----------------							if( ajaxSettings.ajaxType == 'POST' ) {					var ajaxRequestClient = {};										if( typeof ( FormData ) == 'function' ) {						ajaxRequestClient  = new FormData();						}										// --- cek if this oject data on "ajaxToString"										if( typeof( ajaxSettings.ajaxParam ) == 'object' ) 						for( var i in ajaxSettings.ajaxParam  )  {						ajaxRequestClient.append( i, this.ajaxToString( ajaxSettings.ajaxParam[i] ) );					}									// -- this will get arguments callback  -----------											var callbacks = ajaxSettings.ajaxFunc;					if( this.ajaxObject(callbacks)) for( var i in callbacks ){						if( this.ajaxFuction( callbacks[i] ) ){							this.ajaxClientReq.addEventListener(this.ajaxListener[i], callbacks[i], ajaxSettings.ajaxSync );							}						}				// --- sent object for get data "JSON" context type ----------------------------									this.ajaxClientReq.open( ajaxSettings.ajaxType, ajaxSettings.ajaxUrl, false);					this.ajaxClientReq.send( ajaxRequestClient );					try{						return JSON.parse( this.ajaxClientReq.responseText.trim() );					} 					catch( e ){ return this;  }								}								return this;			}				    } 		catch(e){ Ext.Error({ log  : e, name : " link connection error" }); }	},	// function "aJSON" is expired code. will replace with new version .	aJSON : function( response ){		JSON.parse( ( response ? response : null ) );  		}, // function "POST" object with metjode post data from client sesison   // by handle function "post" methode , for easy use look at .  // update optimize of script object handler with new revision .      post : function(){ try {				var ajaxSettings = this.ajaxSettup({}, this.ajaxSettings);				// -- XML object active on browser "XMLHttpRequest"		  		this.ajaxClientReq = ( this.ajaxFuction( XMLHttpRequest ) ? new XMLHttpRequest() : 								new ActiveXObject("Microsoft.XMLHTTP")  );									// object active on ajaxsettup 			if( this.ajaxObject( ajaxSettings ) ) {						// -- tradional metjode type "GET"  on post of data clientRequest 			// -- will send of object attribute				var ajaxMime  = this.ajaxMimeType[ajaxSettings.ajaxMime];			    if( ajaxSettings.ajaxType == 'GET' ) {					var ajaxToUrl = this.ajaxToUrl( ajaxSettings );											this.ajaxClientReq.open(ajaxSettings.ajaxType, ajaxToUrl, ajaxSettings.ajaxSync );												// -- this will get arguments callback  -----------												var callbacks = ajaxSettings.ajaxFunc;						if( this.ajaxObject(callbacks)) for( var i in callbacks ){							if( this.ajaxFuction( callbacks[i] ) ){								this.ajaxClientReq.addEventListener(this.ajaxListener[i], callbacks[i], ajaxSettings.ajaxSync );								}							}						this.ajaxClientReq.send(null);						return this;				} 							// -- tradional metjode type "POST"  on post of data clientRequest 			// -- will send of object attribute								if( ajaxSettings.ajaxType == 'POST' ) {										var ajaxRequestClient = {};					if( this.ajaxFuction( FormData ) ) {						ajaxRequestClient  = new FormData();						}										// --- cek if this oject data on "ajaxToString"					if( this.ajaxObject( ajaxSettings.ajaxParam ) ) for( var i in ajaxSettings.ajaxParam  ) {						ajaxRequestClient.append( i, this.ajaxToString( ajaxSettings.ajaxParam[i] ) );					}				// --- this will test  -------------------------------------------					var callbacks = ajaxSettings.ajaxFunc;					if( this.ajaxObject(callbacks) ) for( var i in callbacks ){						if( this.ajaxFuction( callbacks[i] ) ){							this.ajaxClientReq.addEventListener(this.ajaxListener[i], callbacks[i], ajaxSettings.ajaxSync );							}						}									// --- sent object for get data "JSON" context type  					this.ajaxClientReq.open( ajaxSettings.ajaxType, ajaxSettings.ajaxUrl);					this.ajaxClientReq.send( ajaxRequestClient );					return this;				}			}					// not context return this procedure only  // 			return this;		}		catch(e){ Ext.Error({ log  : e, name : " link connection error" }); }	},// function "upload" this will optimize with new code for eficient procedure .	upload : function() {	// will struct on this get parent of "class"					var ajaxRequestClient = {}, ajaxReqUpload = {};			this.ajaxClientReq = ( this.ajaxFuction( XMLHttpRequest ) ? new XMLHttpRequest() : 								new ActiveXObject("Microsoft.XMLHTTP")  );				var parents = new E_ui(), ajaxSettings = this.ajaxSettup({}, this.ajaxSettings);				//console.log(this.ajaxFuction( E_ui ));				if( this.ajaxFuction( E_ui ) ) for( var i in parents ){			this[i] = parents[i];		}			// console.log( ajaxSettings );	// cek existensi of file to uplod if null then set defaults required .		var ajaxMime  = this.ajaxMimeType[ajaxSettings.ajaxMime];				if( this.ajaxFuction(FormData) )  {			ajaxRequestClient = new FormData();		}			// get select of file to upload process will cek before "send"			console.log( this );				if( this.ajaxObject(ajaxSettings) && ajaxSettings.ajaxFiles == false ){			ajaxReqUpload['fileToupload'] = this.Cmp('fileToupload').getElementId().files[0]; }		else		{			if( typeof( ajaxSettings.ajaxFiles ) == 'string' ){				ajaxReqUpload[ajaxSettings.ajaxFiles] = this.Cmp(ajaxSettings.ajaxFiles).getElementId().files[0];				// ajaxSettings.ajaxFiles				} 						// if file object set array "method" then set to array list for send object 						var ajaxFiles = ajaxSettings.ajaxFiles;			if( this.ajaxObject(ajaxFiles) ) 			  for( var i in ajaxFiles ) {				ajaxReqUpload[ajaxFiles[i]] = this.Cmp(ajaxFiles[i]).getElementId().files[0]; 				}		}		// ---- try 		try {						// push data file to object process then wil set to ajax ready. 						var ajaxReqUpload = ajaxReqUpload;			if( this.ajaxObject(ajaxReqUpload)) for( var i in ajaxReqUpload ) {				ajaxRequestClient.append(i, ajaxReqUpload[i] );			}						// push data parameter additional after upload file  						var ajaxParam =  ajaxSettings.ajaxParam;			if( this.ajaxObject(ajaxParam)) for( var i in ajaxParam ) {				ajaxRequestClient.append(i, this.ajaxToString( ajaxParam[i] ) );			}						// then called methode of function cllback 						var callbacks =  ajaxSettings.ajaxFunc;			if( this.ajaxObject( callbacks ) ) for( var i in callbacks  ){				if( this.ajaxFuction( callbacks[i] ) ){					this.ajaxClientReq.addEventListener( this.ajaxListener[i], callbacks[i], ajaxSettings.ajaxSync );					}				}						// then set this upload proces .. then will callback set alert client .						ajaxSettings.ajaxSync = true;			this.ajaxClientReq.open(ajaxSettings.ajaxType, ajaxSettings.ajaxUrl, ajaxSettings.ajaxSync );			this.ajaxClientReq.send(ajaxRequestClient);						return this;		} 		// this will trow if error detected process 		catch( e ) {  this.Error({ log  : 'ajax client upload', name : "Ext.Ajax().upload()" }); }	},	// load ajax page by tradional process "xml methode" object linear by "ext" object 	load : function( objectInner ) { try{				// var object ajaxInner 		this.ajaxReqInner = objectInner;				// set var object ajax setting  		this.ajaxSettings.ajaxSync = true; 		this.ajaxSettings.ajaxType = 'GET'; 				// called supper class object "E_ui"				var _self = new E_ui(), 					// call ajax setup object 				ajaxSettings = this.ajaxSettup({}, this.ajaxSettings);					if( this.ajaxObject( _self ) ) for( var i in _self ){			this[i] = _self[i];		}				// -- XML object active on browser "XMLHttpRequest"		this.ajaxClientReq = ( this.ajaxFuction( XMLHttpRequest ) ? new XMLHttpRequest() : 								new ActiveXObject("Microsoft.XMLHTTP")  );									// then set object get ALL Method  		if( ajaxSettings.ajaxType == 'GET' ) {			var ajaxToUrl = this.ajaxToUrl( ajaxSettings );						// open anak client open "XML "			this.ajaxClientReq.open(ajaxSettings.ajaxType, ajaxToUrl, ajaxSettings.ajaxSync );						// set requestHeaderReq 			this.ajaxClientReq.setRequestHeader("Content-type", "application/x-www-form-urlencoded");						// -- this will get arguments callback  -----------			var callbacks = ajaxSettings.ajaxFunc;			if( this.ajaxObject(callbacks)) for( var i in callbacks ){				if( this.ajaxFuction( callbacks[i] ) ){					this.ajaxClientReq.addEventListener(this.ajaxListener[i], callbacks[i], ajaxSettings.ajaxSync );					}				}			// sent data affter OK  -0--				this.ajaxClientReq.send(null);						// will get on ready state change 			var clientResponseHTTP, 			 			// client script check  			    clientScript = new Array(), 			 			// render super class object 			    self = this;						// function loader every time  --			this.ajaxClientReq.onreadystatechange =  function(){ 								if( this.readyState == 4 && this.status == 200 ){					clientResponseHTTP = this.responseText;						self.Cmp( self.ajaxReqInner ).setText( clientResponseHTTP );										while(clientResponseHTTP.indexOf("<script") > -1 || clientResponseHTTP.indexOf("</script") > -1) {							var vala = clientResponseHTTP.indexOf("<script"),								valb = clientResponseHTTP.indexOf(">", vala),								valc = clientResponseHTTP.indexOf("</script", vala),								vald = clientResponseHTTP.indexOf(">", vala);												clientScript.push(clientResponseHTTP.substring(valb+1, valc));						clientResponseHTTP = clientResponseHTTP.substring(0, vala) + clientResponseHTTP.substring(vald+1);					 }										//console.log( clientScript );					if( self.ajaxObject( clientScript ) ) for( var i in clientScript ) {						try{  eval( clientScript[i] );  }						catch( e ){ 													}						}					//return xhr.ajaxClientReq.readyState;					}							}		}		 		 return this;				} catch( e ){			Ext.Error({ log  : e, name : window.sprintf("%s:: Ext.Ajax().load()", self.ajaxReqInner), lineNumber : e.lineNumber });		}	},		DirectUpload:function()	{		var forms, fupload;		try 		{			  forms	 = new FormData(); 			if( this._ajaxSetup !='' )			{				try {					forms.append('filename', fn.file);					fupload = new XMLHttpRequest(); 					fupload.addEventListener('load',fn.complete, true);										// error handle 					 if( fn.error ){ 						fupload.addEventListener("error", fn.error, false); 					 }										// abort handle 					if( fn.abort ){ 						fupload.addEventListener("abort", fn.abort, false); 					}										fupload.open((fn.method ? fn.method : 'POST' ), this._ajaxSetup );					fupload.send(forms);				}				catch(e){					Ext.Error({ log  : e, name : " Ext.Ajax().upload()" });				}				  }			  else{					Ext.Error({ log  : 'No files', name : " Ext.Ajax().upload()" });			  }			}			catch(e){				Ext.Error({ log  : e, name : " Ext.Ajax().upload()" });		}	},			MultipleUpload : function(){		var _XMLForm, fupload;		try  {			 _XMLForm = new FormData(); 			if( this._ajaxSetup !='' )			{				try 				{					if( typeof(fn.file)=='object' ){						for(var el in  fn.file ){							for( var obkeys in fn.file[0] ){								_XMLForm.append(obkeys, fn.file[0][obkeys]);							}						}					}										fupload = new XMLHttpRequest(); 					fupload.addEventListener('load',fn.complete, true);										// /*error handle **/					 if( fn.error ){ 						fupload.addEventListener("error", fn.error, false); 					 }										// /*abort handle */					if( fn.abort ){ 						fupload.addEventListener("abort", fn.abort, false); 					}										fupload.open((fn.method ? fn.method : 'POST' ), this._ajaxSetup );					fupload.send(_XMLForm);				}				catch(e){					Ext.Error({ log  : e, name : " Ext.Ajax().MultipleUpload()" });				}				  }			  else{					Ext.Error({ log  : 'No files', name : " Ext.Ajax().MultipleUpload()" });			  }			}			catch(e){				Ext.Error({ log  : e, name : " Ext.Ajax().MultipleUpload()" });		}	}	 }    return ajaxDefaults; };// ----------------------------------------------------------------------------/* @package 			function get open window popup on prototype.window  *						browser existensi.  *	 						 * @auth 				uknown 						  * @param 				data { } / object  */ E_ui.prototype.self = function( extend ){	var self = new E_ui(); if( self ) for( var i in self ){		this[i] = self[i];	}			if( extend ) for( var i in extend ){		this[i] = extend[i];	}	return this;}// ----------------------------------------------------------------------------/* @package 			function get open window popup on prototype.window  *						browser existensi.  *	 						 * @auth 				uknown 						  * @param 				data { } / object  */ E_ui.prototype.Window = function( data ){// this default data accepted from client  var winnewProtected = data, 	 winnewProtectedData = [], 	 winnewProtectedConfig = {};	// on  prototype object window console statments //  ok sip. var winnewProtectedUrl = winnewProtected.url;// on  prototype object window console statments // ok sip.this.winnewProtectedNew = false;// compile parameter to Uri Component  this.winnewCompile = function(){	if( typeof( winnewProtected.param ) == 'object' ) {		var winnewSizzle = 0; for( var i in winnewProtected.param ){			winnewProtectedData[winnewSizzle] = window.sprintf( '%s=%s', i, winnewProtected.param[i] );  				winnewSizzle++;		}		}// cek apakah ada char "?" jika iya maka tampilkan .  if( winnewProtectedUrl.indexOf( '?' ) < 0 ){	winnewProtectedUrl = window.sprintf( '%s/?', winnewProtectedUrl);  }    winnewProtectedUrl = window.sprintf("%s%s",winnewProtectedUrl, winnewProtectedData.join("&"));  return winnewProtectedUrl; };// then will settup data OK this.winnewConfig = function(){// default settup data config . var config = {	'right' : winnewProtected.right, 'left' : winnewProtected.left,	'top' : winnewProtected.top, 'width' : winnewProtected.width,	'height' : winnewProtected.height, 'menubar' : winnewProtected.menubar,	'scrollbars': winnewProtected.scrollbars, 'status' : winnewProtected.status,	'toolbar' : winnewProtected.toolbar, 'resizable': winnewProtected.resizable  };// setup on configuration    if( typeof( config ) == 'object' ) for( var i in config ){	 if( typeof( config[i] ) != 'undefined' ){	 var keyProtectedData = window.sprintf("%s=%s", i, config[i]);		 winnewProtectedConfig[keyProtectedData] = keyProtectedData;	 } }	//  -- Object.keys ---  return Object.keys(winnewProtectedConfig).join(',');};// compile configurable  var protectedSuper = this;this.popup = function() { if( typeof ( protectedSuper ) == 'object' ) {	var winnewProtectedUrl = protectedSuper.winnewCompile(),		winnewProtectedConf = protectedSuper.winnewConfig();			console.log(window.sprintf("'%s'",  winnewProtectedConf));		protectedSuper.winnewProtectedNew = window.open(winnewProtectedUrl, winnewProtected.name, window.sprintf("%s",  winnewProtectedConf));		protectedSuper.winnewProtectedNew.focus();		console.log(protectedSuper.winnewProtectedNew);	}	return protectedSuper;};// on open popup this.open = function() { if( typeof ( protectedSuper ) == 'object' ) {	var winnewProtectedUrl = protectedSuper.winnewCompile();		protectedSuper.winnewProtectedNew = window.open(winnewProtectedUrl, winnewProtected.name, "");		protectedSuper.winnewProtectedNew.focus();	}	return protectedSuper.winnewProtectedNew;};// on popup ready this.ready = function() {  if( !protectedSuper.winnewProtectedNew ){	  return false;  }   return true;};// on popup ready this.newtab = function() { if( typeof ( protectedSuper ) == 'object' ) {	var winnewProtectedUrl = protectedSuper.winnewCompile();		return window.open(winnewProtectedUrl);	}};return this;  }; /*   * @def 	: Encripsi labeldata  * ------------------------------------------------- * @param	: label string  * @akses 	: public  */ E_ui.prototype.BASE64 = ( function(){ return( {			_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",		encode : function (input) {			var output = "";			var chr1, chr2, chr3, enc1, enc2, enc3, enc4;			var i = 0;						input = this._utf8_encode(input);			while (i < input.length) {				chr1 = input.charCodeAt(i++);				chr2 = input.charCodeAt(i++);				chr3 = input.charCodeAt(i++);								enc1 = chr1 >> 2;				enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);				enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);				enc4 = chr3 & 63;								if (isNaN(chr2)) {					enc3 = enc4 = 64;				} else if (isNaN(chr3)) {					enc4 = 64;				}				output = output +				this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +				this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);			}			return output;		},		// public method for decoding		decode : function (input) {			var output = "";			var chr1, chr2, chr3;			var enc1, enc2, enc3, enc4;			var i = 0;			input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");			while (i < input.length) {				enc1 = this._keyStr.indexOf(input.charAt(i++));				enc2 = this._keyStr.indexOf(input.charAt(i++));				enc3 = this._keyStr.indexOf(input.charAt(i++));				enc4 = this._keyStr.indexOf(input.charAt(i++));				chr1 = (enc1 << 2) | (enc2 >> 4);				chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);				chr3 = ((enc3 & 3) << 6) | enc4;				output = output + String.fromCharCode(chr1);				if (enc3 != 64) {					output = output + String.fromCharCode(chr2);				}				if (enc4 != 64) {					output = output + String.fromCharCode(chr3);				}			}			output = this._utf8_decode(output);			return output;		},		// private method for UTF-8 encoding				_utf8_encode : function (string) {			string = string.replace(/\r\n/g,"\n");			var utftext = "";			for (var n = 0; n < string.length; n++) {				var c = string.charCodeAt(n);				if (c < 128) {					utftext += String.fromCharCode(c);				}				else if((c > 127) && (c < 2048)) {					utftext += String.fromCharCode((c >> 6) | 192);					utftext += String.fromCharCode((c & 63) | 128);				}				else {					utftext += String.fromCharCode((c >> 12) | 224);					utftext += String.fromCharCode(((c >> 6) & 63) | 128);					utftext += String.fromCharCode((c & 63) | 128);				}			}			return utftext;		},		// private method for UTF-8 decoding		_utf8_decode : function (utftext) {			var string = "";			var i = 0;			var c = c1 = c2 = 0;			while ( i < utftext.length ) {				c = utftext.charCodeAt(i);				if (c < 128) {					string += String.fromCharCode(c);					i++;				}				else if((c > 191) && (c < 224)) {					c2 = utftext.charCodeAt(i+1);					string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));					i += 2;				}				else {					c2 = utftext.charCodeAt(i+1);					c3 = utftext.charCodeAt(i+2);					string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));					i += 3;				}			}			return string;		}   }); })();  /* * Handle Untuk Menampilkan && directory yang akan di gunakan  * oleh system applikasi   */  E_ui.prototype.System = ( function(){  var __BASE_OBJECT_SYSTEM =  {	__base_object : {},  // * define object  */	__base_system : {},  // * define object  */	__base_proc   :  new Array(),  // * define object */	__base_path   : window.location, // * define object  */	__base_vars   : window.location.pathname.split('/'), // splite object */	 // *----------- agresort af function call --------------------* / 	 URL : function( field ) {		var url = this.__base_path.search.replace(/[*?]/g,'').split("&"), url_obj = {}		var vars = url.map(function(e){ 			url_obj[e.split("=")[0]] = e.split("=")[1]; 			});				//-------- return fn ---------- 		return {			getValue : function(){				return ( typeof(url_obj[field])=='undefined' ? false : url_obj[field]);			},			getObject : function(){				return ( typeof(url_obj)=='object' ? url_obj : {});			}			}	 },		  // *----------- agresort af function call --------------------* / 	__base_func : function( arr_base_root ) {		var obj = {}, _arr_base = arr_base_root.split("/");		for( var i in _arr_base ) {			if( _arr_base[i].length !=0 ){				obj[i] = _arr_base[i]			}			}				var vals = Object.keys(obj).map(function(key){return obj[key]});		return vals.join("/");	 },		  	// *----------- agresort af function call --------------------* /		__default : function() {		for( var _z_ in this.__base_vars ) {			//console.log(this.__base_vars[_z_]);			if( this.__base_vars[_z_].toString().indexOf('.php') > 0 ) {				this.__base_object["_BASE_INDEX"] = this.__base_vars[_z_];			} else{				this.__base_object["_BASE_INDEX"] = "index.php";			}			}				this.__base_object["_BASE_PORT"] = this.__base_path.port;		this.__base_object["_BASE_HOSTNAME"] = this.__base_path.hostname;		this.__base_object["_BASE_PROTOCOL"] = this.__base_path.protocol;			// --------------- split data from here ----------------------------------------------------			var __base_arr_split = this.__base_path.pathname.split( this.__base_object._BASE_INDEX);				if( __base_arr_split.length == 0 ) {			this.__base_object['_BASE_ROOT'] = "";			this.__base_object['_BASE_SWITCH'] = "";		}		else if( __base_arr_split.length == 1) {			this.__base_object['_BASE_ROOT'] = this.__base_func(__base_arr_split[0]); // __base_arr_split[0].replace(/\//g,'');			this.__base_object['_BASE_SWITCH'] = "";					}else {			this.__base_object['_BASE_ROOT'] = this.__base_func(__base_arr_split[0]); //__base_arr_split[0].replace(/\//g,'');			this.__base_object['_BASE_SWITCH'] = __base_arr_split[1].replace(/\//g,'');		}				var __base_root_path = "";		if( typeof( this.__base_object._BASE_PROTOCOL) == 'string' 			&& this.__base_object._BASE_PROTOCOL!='' )		{			__base_root_path += this.__base_object._BASE_PROTOCOL +"//";		}				if( typeof( this.__base_object._BASE_HOSTNAME) == 'string' 			&& this.__base_object._BASE_HOSTNAME!='' )		{			__base_root_path += this.__base_object._BASE_HOSTNAME;		}				if( typeof( this.__base_object._BASE_PORT) == 'string' 			&& this.__base_object._BASE_PORT!='' )		{			__base_root_path += ( this.__base_object._BASE_PORT.length==0 ? "/" : ":"+this.__base_object._BASE_PORT +"/");		} else{			__base_root_path += ( this.__base_object._BASE_PORT.length==0 ? "/" : ":"+this.__base_object._BASE_PORT +"/");		}				//console.log(__base_root_path);		if( typeof( this.__base_object._BASE_ROOT) == 'string' 			&& this.__base_object._BASE_ROOT!='' )		{			//console.log(this.__base_object._BASE_ROOT);			__base_root_path += this.__base_object._BASE_ROOT;			if( __base_root_path ){				this.__base_system["_BASE_ROOT_PAGE"] = __base_root_path;			}		}				if( typeof( this.__base_object._BASE_INDEX) == 'string' 			&& this.__base_object._BASE_INDEX!='' )		{			__base_root_path += "/"+ this.__base_object._BASE_INDEX				if( __base_root_path ){				this.__base_system["_BASE_INDEX_PAGE"] = __base_root_path;			}		}				if( typeof( this.__base_object._BASE_SWITCH) == 'string' 			&& this.__base_object._BASE_SWITCH!='' )		{			__base_root_path += "/"+ this.__base_object._BASE_SWITCH;						if( __base_root_path ){				this.__base_system["_BASE_SWITCH_PAGE"] = __base_root_path;			}		}			// -------------- then save of 	object --------------------------		if( this.__base_system._BASE_ROOT_PAGE !='' ){			this.__base_system['_BASE_SYSTEM_PAGE'] = this.__base_system._BASE_ROOT_PAGE+"/system";			this.__base_system['_BASE_APPLICATION_PAGE'] = this.__base_system._BASE_ROOT_PAGE+"/application";			this.__base_system['_BASE_LIBRARY_PAGE'] = this.__base_system._BASE_ROOT_PAGE+"/library";		}				return ( typeof(this.__base_system) == 'object' ? this.__base_system : {} );	},		view_sytem_url:function(){ 		return ( this.__default()._BASE_SYSTEM_PAGE ? 			this.__default()._BASE_SYSTEM_PAGE : null );	},		view_page_index:function(){ 		return ( this.__default()._BASE_INDEX_PAGE ? 			this.__default()._BASE_INDEX_PAGE : null );	},			view_app_url:function(){ 		return ( this.__default()._BASE_APPLICATION_PAGE ? 			this.__default()._BASE_APPLICATION_PAGE : null );	},	view_library_url : function(){ 		return ( this.__default()._BASE_LIBRARY_PAGE ?			this.__default()._BASE_LIBRARY_PAGE : null );	},		view_name_url:function( name ){ 		Ext.DOM.view_name_url = name; 	},		view_file_name : function(){ 		return ( Ext.DOM.view_name_url ? Ext.DOM.view_name_url : null ); 	}	  }   // ------------- this will patch bug on core EUI ----------------------------   // ----------- return of obhject string ----------------------------   return __BASE_OBJECT_SYSTEM;   })();  /* * @ def 	: ready function  * * @ param	: test load  * @ type 	: revision  */  E_ui.prototype.Error = function(error){	if( error ) {				if( typeof (Ext.Browser) == 'undefined'){			console.log(			"==============================================================================================================================\n"+ Ext.define.framewok +" :: "+ Ext.define.version +" :: Track Error\n==============================================================================================================================\n"+			"Severity :\nHandle Object : "+ ( error.name ? error.name : '' ) +", \nMessage :" + ( error.log.message ? error.log.message : error.log ) + ",\nLine Number :" + ( error.log.lineNumber ? error.log.lineNumber : 'no' ) + 			"\n==============================================================================================================================\n"+			( new Error ).stack.split("\n\r") +			"=============================================================================================================================="			);			return false;		}		if( Ext.Browser().getName() == 'Microsoft Internet Explorer' ){			console.log(			"==============================================================================================================================\n"+ Ext.define.framewok +" :: "+ Ext.define.version +" :: Track Error"+			"\n==============================================================================================================================\n"+						Ext.define.name+" Severity :\nHandle Object : "+ ( error.name ? error.name : '' ) +", \nMessage :" + ( error.log.message ? error.log.message : error.log ) + ",\nLine Number :" + ( error.log.lineNumber ? error.log.lineNumber : 'no' ) + "\n");		} else {				console.log(			"==============================================================================================================================\n"+ Ext.define.framewok +" :: "+ Ext.define.version +" :: Track Error\n==============================================================================================================================\n"+			Ext.define.name+" Severity :\nHandle Object : "+ ( error.name ? error.name : '' ) +", \nMessage :" + ( error.log.message ? error.log.message : error.log ) + ",\nLine Number :" + ( error.log.lineNumber ? error.log.lineNumber : 'no' ) + 			"\n==============================================================================================================================\n"+			( new Error ).stack.split("\n\r") +			"=============================================================================================================================="			);		}	}	 } /* * @ def 	: ready function  * * @ param	: test load  * @ type 	: revision  */ E_ui.prototype.document = function( str, call){// -- object parameter yang akan di handle jika argument ber isi string 	var str  = str, 	// -- memanggil prototype "self" core dari enigma interface   			self  = Ext.self(),		// -- memanggil prototype "self" core dari enigma interface   			call = call;		// -- push all methode on here  --- 	 for( var i in self ){ 	this[i] = self[i];   }// -- then will setup 	 var Event = { "ready":"ready", "resize":"resize",  "load":"load" },	 Utils = this.Util({});// -- set global object uttuk extends data  var supper = this; // -- document on ready state  ---  this.ready = function( callbacks ){	window.document.addEventListener("DOMContentLoaded",callbacks, false); 	if(window.document.readyState == 'complete' ){		callbacks.apply(this, new Array( supper, window, window.document ));	} }; // -- document on "resize" state  ---   this.resize = function( callbacks ){	if ( Utils.IsFunction( callbacks ) ){  	  window.onresize = callbacks;		} };  this.load = function( callbacks ){	if ( Utils.IsFunction( callbacks ) ){  	  window.onload = callbacks;		} }; // if user client set on direct "document" function "ready" if( !window.strcmp("ready", str ) ){	return this.ready( call ); }// if user client set on direct "document" function "resize"  if( !window.strcmp("resize", str ) ){	return this.resize( call ); } // if user client set on direct "document" function "ready" if( !window.strcmp("load", str ) ){	return this.load( call ); }  return this; }/* @ def 	:  Ext.Msg("").Confirm()  * * @ triger : Pecah Policy * @ params : jika terjadi pecah polis */ E_ui.prototype.Msg = function( message ){ var arr_msg = {}, msg_string = "";  if( typeof( message ) == 'object' ){	for( var msg in message ){		arr_msg[msg] = msg;		arr_msg[message[msg]] = message[msg];	}	msg_string = Object.keys(arr_msg).join(" ");	 } else {	msg_string = ( message ? message : '' ); }	 // ------------ on handle  object ------------ var message = msg_string, result = { 	Confirm : function(){		return window.confirm(message)	},		Success : function(){		return window.alert("Success, "+ message + ".");	},		Error : function(){		return window.alert("Error, "+ message + " !");	},		Info : function(){		return window.alert("Information, "+ message+ " !")	},		Failed : function(){		return window.alert("Failed, "+ message + " !")	},		TxtSuccess : function(){		return window.alert(Ext.Sprintf( "Success, %s.", message));	},		TxtError : function(){		return Ext.Sprintf( "Error, %s !", message); 	},		TxtInfo : function(){			return Ext.Sprintf( "Information, %s !", message);	},		TxtFailed : function(){		return Ext.Sprintf( "Failed, %s !", message)//window.alert("Failed, "+ message + " !")	}	  };    return result;}    	/* * @ def 	: ready function  * * @ param	: test load  * @ type 	: revision  */ E_ui.prototype.options = function(data){ var fo = ( data.fo ? data.fo : false ), to = ( data.to ? data.to : false ); var result =  {		move : function(){			var selLength = fo.length,				selectedText = new Array(),	selectedValues = new Array(),				selectedCount = 0;							var i;							for(i=selLength-1; i>=0; i--)				{					if(fo.options[i].selected)					{					  selectedText[selectedCount] = fo.options[i].text;					  selectedValues[selectedCount] = fo.options[i].value;					  this.del( fo, i );					  selectedCount++;					}				}								for( var x  = 0 ; x < fo.length; x++){					fo.options[x].selected = true;					}								for( i = selectedCount-1; i>=0; i-- )				{					this.add(to, selectedText[i], selectedValues[i]);				}		},				add : function( t1, t2, v) {			var opts = new Option( t2, v ); l = t1.length;			t1.options[l] = opts;			for( var x  = 0 ; x < t1.length; x++){				t1.options[x].selected = true;				}		},				del : function( fo, i) { 		  var L = parseInt( ( fo.length ? fo.length :0 ) );			if( L > 0 ) {				fo.options[i] = null;			}		}	}		return result;}/* * @ def 	: ready function  * * @ param	: test load  * @ type 	: revision  */ E_ui.prototype.extend = function( dst, src ){   for (var prop in src ) {	 dst[prop] = src[prop];   }	return dst;};/* * @ def 	: create Element / append * * @ param	: test load  * @ type 	: revision  */(function(UI,Ext){	UI.prototype.Create= function( param ){		var append = 		{			element : function(){				if( (typeof(param)=='object')||(typeof(param)=='string')) {					try{ return document.createElement(param); }						catch(e){						console.log(e);					}				}			}		}				return ( typeof(append)=='object' ? 				 append : false );	}		UI.prototype.Remove = function( param ){		var Remove = 		{			element : function(){				if( (typeof(param)=='object')||(typeof(param)=='string')) {					var removeId = Ext.Cmp(param).getElementId();						removeId.parentNode.removeChild(removeId);						removeId = null;				}			}		}				return ( typeof(Remove)=='object' ? 				 Remove : false );	}})(E_ui,Ext);  /* * @ def 	: ready function  * * @ param	: test load  * @ type 	: revision  */ (function(Core){ Core.prototype.Layout = function( view ){ var _layout =  {	Height : function() { 			return ( view.screen.availHeight ? 			view.screen.availHeight : 0  );		},	Left : function(){ 			return ( view.screen.availLeft ? 			view.screen.availLeft : 0  );		},	Top : function(){ 			return ( view.screen.availTop ? 			view.screen.availTop : 0  );		},	Width : function(){ 			return ( view.screen.availWidth ? 			view.screen.availHeight : 0  );		},	ColorDepth : function(){ 			return ( view.screen.colorDepth ? 			view.screen.colorDepth : 0  );		},	ResizeWidth:function(){			return ( view.innerWidth ? 				view.innerWidth : 0 );		},	ResizeHeight:function(){			return ( view.innerHeight ? 				view.innerHeight : 0 );		} }; return ( _layout ? _layout : null ); }})(E_ui); /*   * @def 	: Util labeldata // call Ext.Util(data).JSON()// attribute ajax ; * ------------------------------------------------- * @param	: label string  * @akses 	: public  */(function( Super ){ Super.prototype.Util = function( defaults ){ var Utils = defaults, self = this; // this attribute ceck function of object		 this.IsFunction = function( functions ){	return ( typeof( functions ) == 'function' ? true : false ); }  this.IsString = function( String ){	return ( typeof( String ) == 'string' ? true : false ); }	// this attribute ceck function of object    this.IsObject = function( object ){	return ( typeof( object ) == 'object' ? true : false ); } // parse object data "JSON function " callback   this.JSON = function() {	 	this.clientReqJson = {};	this.clientResJson;		if( self.IsObject( Utils.target ) )	{		// will get target object  		try{			this.clientResJson = JSON.parse( Utils.target.responseText);		} catch( e ){			this.clientResJson = Utils.target;		}				// will state on proces  ------------------------------				if( self.IsObject( this.clientResJson ) ){			this.clientReqJson = this.clientResJson;		} else {			this.clientReqJson = this.clientResJson;		}	}	else {		this.clientReqJson = JSON.parse( Utils );	}		return this.clientReqJson;	 }  // parse object data "Proc function " callback  // this old function is exits    this.proc = function( callback ) {	 // setup object  ---	 	var clientReqJson  = this.JSON();	 // what is function or not if not will callback with this object all 	if( self.IsFunction( callback )) {			if( self.IsObject( clientReqJson ) ){			callback.apply(this, new Array( clientReqJson, Utils ));		} else {			callback.apply(this, new Array( clientReqJson, Utils ) );		}	} 	//  return konbsep object  		return this; }  // will loop object my parent push on here  var _self = Ext.self({}); for( var i in _self ){ 	this[i] = _self[i]; }  // console.log(this); // retrun this object data call exec command   return this; }})( E_ui ) //-----------------------------------------------------------------------/* * @prototype  		":>Sprintf" * @akses 			public & of run window   * @author 			uknown  */ ;( function( UI ) {  UI.prototype.Sprintf = function( format ){	var format = format;	for( var i=1; i < arguments.length; i++ ) {		format = format.replace( /%s/, arguments[i] );	}	return format;}})( E_ui );//-----------------------------------------------------------------------/* * @prototype  		":>Sprintf" * @akses 			public & of run window   * @author 			uknown  */ (function(UI,Ext){	UI.prototype.Array = function( param ) {		var _stack = {			in_array : function (needle) {				for(var i in param ) {					if(param[i] == needle) 						return true;				}				return false;			},			array_search : function (needle) {				for(var i in param) {					if(param[i] == needle) return i;				}				return false;			}		}				return ( typeof (_stack)=='object' ? _stack : null );	}})(E_ui,Ext);  //Ext.selector('ss',function(){ }); (function(UI,Ext){	UI.prototype.Selector = function(elem, fn){		var select  = {			query : function(){				return document.querySelector(elem);			}			}				if( typeof select.query() =='object'){			return fn(select.query());		}	} })(E_ui,Ext);/* * @ def 	: Query is gate way jQuery method syncronize * * @ param	 : test load  * @ type 	 : revision  * @ example : Ext.EUI('#');  */ ( function($core, $ext ){	$core.prototype.Progress = function( object, attribute )	{		var $object = $("#"+ object ), $fn = { 			url	   : [Ext.DOM.LIBRARY,"gambar", "loading.gif"],			title  : 'Please wait',			height : '12px'		};	  	 // ------------ on attribute ------------------------- 	 	  if( typeof(attribute) =='object' ){		 $fn.title 	= ( typeof(attribute.title) == 'string' ? attribute.title : "");		 $fn.height = ( typeof(attribute.height) == 'string' ? attribute.height : "");	  }	  	    var _prog =  	   {			html  : "<span style='color:red;' class='ui-label-progress-toolbar'><img src='"+ $fn.url.join("/") +"' height='"+ $fn.height +"'>&nbsp;"+ $fn.title +" ...</span>",			start : function (){				$object.html(this.html);			},			stop : function(){				$object.html("");			}	   }	   	   return ( typeof(_prog) == 'object' ? _prog : false );	       }})(E_ui, Ext ); /* * @ def 	: Add Attribute prototype on E.u.i * * @ param	 : test load  * @ type 	 : revision  * @ example : Ext.EUI('#');  */  ;(function( Cores, $ ){  Cores.prototype.EventUrl = function( arr ){	var _Ext = ( typeof( Ext ) != 'object' ?  new E_ui() : Ext );	return {		Url   : _Ext.System.view_page_index(),		Apply : function(){			var arr_event = new Array(this.Url),				obj_trigger = ( typeof arr !=='object'? new Array(arr) : arr);							for( var e in obj_trigger )	{				arr_event.push(obj_trigger[e]);			}				return arr_event.join("/");		}		} },  Cores.prototype.Image = function( image ){	var _Ext = ( typeof( Ext ) != 'object' ?  new E_ui() : Ext ),		_Image = new Array( Ext.System.view_library_url(), 'gambar', image).join('/');	return _Image;	 }, //------------- array to object data -------------------   Cores.prototype.ArrayObject = function( param )  {	var ArrData = {} 	for( var i in param ){		if( typeof(param[i]) =='object' ) {			ArrData[i] = param[i].join(',');		} else {			ArrData[i] = param[i];		}		}    return ArrData; } })(E_ui, jQuery);   (function(core, $ ) {	core.prototype.Extract = function( varchar, chars )	{		var nvarchar = ( varchar.length - 3 );		var nobject = new Array();		for(var i=0; i<=nvarchar; i++ ){			nobject[i] = chars;		}   				var arr_object = new Array( varchar.substring(0,3), nobject.join(""));		return arr_object.join("");	}	})( E_ui, jQuery )/* * @ def 	: Query is gate way jQuery method syncronize * * @ param	 : test load  * @ type 	 : revision  * @ example : Ext.EUI('#');  */  try{   (function($, Cores){		Cores.prototype.query = function( QuerySlector ){			try			{ 				if( typeof($)=='object'||					typeof($)=='function' || 					typeof($)=='string')				{					if( typeof(QuerySlector)=='string'|| 						typeof(QuerySlector)=='function'||						typeof(QuerySlector)=='object')					{						return $(QuerySlector);					}			  }				}			catch(e){				Ext.Error({log : e , name : 'jQuery undefine'});			}			}  })($, E_ui); }catch(e){ (function(core,e){	Ext = new core();	Ext.Error({log: e,name : e.name}); })(E_ui,e);}// ---------------------------------------------------------------------------/* * @ pack 	 : window.sprintf()  simply and easy use . * * @ param	 : test load  * @ type 	 : revision  */  window.sprintf = function( format ) {  for( var i=1; i < arguments.length; i++ ) {	format = format.replace( /%s/, arguments[i] );  }  return format;}// ---------------------------------------------------------------------------/* * @ pack 	 : window.strcmp( str1, str2 )  simply and easy use . * * @ param	 : test load  * @ type 	 : revision  */  window.strcmp = function( str1, str2 ){ if( typeof( str1 ) == 'string' &&  typeof( str2 ) == 'string' ){  	if( str1.localeCompare( str2 ) == 0  ){		return false;	} else {		return true;	} } return true;}// ---------------------------------------------------------------------------/* * @ pack 	 : object name space window "Ext" enigma user interface  * * @ param	 : test load  * @ type 	 : revision  */  var Ext = Sy = ( function( Core ){  return new Core() })( E_ui );// ---------------------------------------------------------------------------/* * @ pack 	 : object name space window "Ext" enigma user interface  * * @ param	 : test load  * @ type 	 : revision  */  //console.log( Ext.Extract('10100101001', 'x') );;